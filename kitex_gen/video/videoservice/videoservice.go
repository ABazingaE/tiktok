// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "tiktok/kitex_gen/video"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"VideoStream":       kitex.NewMethodInfo(videoStreamHandler, newVideoServiceVideoStreamArgs, newVideoServiceVideoStreamResult, false),
		"VideoUpload":       kitex.NewMethodInfo(videoUploadHandler, newVideoServiceVideoUploadArgs, newVideoServiceVideoUploadResult, false),
		"VideoList":         kitex.NewMethodInfo(videoListHandler, newVideoServiceVideoListArgs, newVideoServiceVideoListResult, false),
		"VideoInfoListById": kitex.NewMethodInfo(videoInfoListByIdHandler, newVideoServiceVideoInfoListByIdArgs, newVideoServiceVideoInfoListByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func videoStreamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoStreamArgs)
	realResult := result.(*video.VideoServiceVideoStreamResult)
	success, err := handler.(video.VideoService).VideoStream(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoStreamArgs() interface{} {
	return video.NewVideoServiceVideoStreamArgs()
}

func newVideoServiceVideoStreamResult() interface{} {
	return video.NewVideoServiceVideoStreamResult()
}

func videoUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoUploadArgs)
	realResult := result.(*video.VideoServiceVideoUploadResult)
	success, err := handler.(video.VideoService).VideoUpload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoUploadArgs() interface{} {
	return video.NewVideoServiceVideoUploadArgs()
}

func newVideoServiceVideoUploadResult() interface{} {
	return video.NewVideoServiceVideoUploadResult()
}

func videoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoListArgs)
	realResult := result.(*video.VideoServiceVideoListResult)
	success, err := handler.(video.VideoService).VideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoListArgs() interface{} {
	return video.NewVideoServiceVideoListArgs()
}

func newVideoServiceVideoListResult() interface{} {
	return video.NewVideoServiceVideoListResult()
}

func videoInfoListByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoInfoListByIdArgs)
	realResult := result.(*video.VideoServiceVideoInfoListByIdResult)
	success, err := handler.(video.VideoService).VideoInfoListById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoInfoListByIdArgs() interface{} {
	return video.NewVideoServiceVideoInfoListByIdArgs()
}

func newVideoServiceVideoInfoListByIdResult() interface{} {
	return video.NewVideoServiceVideoInfoListByIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoStream(ctx context.Context, req *video.VideoStreamReq) (r *video.VideoStreamResp, err error) {
	var _args video.VideoServiceVideoStreamArgs
	_args.Req = req
	var _result video.VideoServiceVideoStreamResult
	if err = p.c.Call(ctx, "VideoStream", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoUpload(ctx context.Context, req *video.VideoUploadReq) (r *video.VideoUploadResp, err error) {
	var _args video.VideoServiceVideoUploadArgs
	_args.Req = req
	var _result video.VideoServiceVideoUploadResult
	if err = p.c.Call(ctx, "VideoUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoList(ctx context.Context, req *video.VideoListReq) (r *video.VideoListResp, err error) {
	var _args video.VideoServiceVideoListArgs
	_args.Req = req
	var _result video.VideoServiceVideoListResult
	if err = p.c.Call(ctx, "VideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoInfoListById(ctx context.Context, req *video.VideoInfoListByIdReq) (r *video.VideoInfoListByIdResp, err error) {
	var _args video.VideoServiceVideoInfoListByIdArgs
	_args.Req = req
	var _result video.VideoServiceVideoInfoListByIdResult
	if err = p.c.Call(ctx, "VideoInfoListById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
