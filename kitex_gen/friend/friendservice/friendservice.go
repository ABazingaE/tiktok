// Code generated by Kitex v0.4.4. DO NOT EDIT.

package friendservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	friend "tiktok/kitex_gen/friend"
)

func serviceInfo() *kitex.ServiceInfo {
	return friendServiceServiceInfo
}

var friendServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FriendService"
	handlerType := (*friend.FriendService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FriendList":    kitex.NewMethodInfo(friendListHandler, newFriendServiceFriendListArgs, newFriendServiceFriendListResult, false),
		"MessageChat":   kitex.NewMethodInfo(messageChatHandler, newFriendServiceMessageChatArgs, newFriendServiceMessageChatResult, false),
		"MessageAction": kitex.NewMethodInfo(messageActionHandler, newFriendServiceMessageActionArgs, newFriendServiceMessageActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "friend",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*friend.FriendServiceFriendListArgs)
	realResult := result.(*friend.FriendServiceFriendListResult)
	success, err := handler.(friend.FriendService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFriendServiceFriendListArgs() interface{} {
	return friend.NewFriendServiceFriendListArgs()
}

func newFriendServiceFriendListResult() interface{} {
	return friend.NewFriendServiceFriendListResult()
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*friend.FriendServiceMessageChatArgs)
	realResult := result.(*friend.FriendServiceMessageChatResult)
	success, err := handler.(friend.FriendService).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFriendServiceMessageChatArgs() interface{} {
	return friend.NewFriendServiceMessageChatArgs()
}

func newFriendServiceMessageChatResult() interface{} {
	return friend.NewFriendServiceMessageChatResult()
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*friend.FriendServiceMessageActionArgs)
	realResult := result.(*friend.FriendServiceMessageActionResult)
	success, err := handler.(friend.FriendService).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFriendServiceMessageActionArgs() interface{} {
	return friend.NewFriendServiceMessageActionArgs()
}

func newFriendServiceMessageActionResult() interface{} {
	return friend.NewFriendServiceMessageActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FriendList(ctx context.Context, req *friend.FriendListReq) (r *friend.FriendListResp, err error) {
	var _args friend.FriendServiceFriendListArgs
	_args.Req = req
	var _result friend.FriendServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageChat(ctx context.Context, req *friend.MessageChatReq) (r *friend.MessageChatResp, err error) {
	var _args friend.FriendServiceMessageChatArgs
	_args.Req = req
	var _result friend.FriendServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, req *friend.MessageActionReq) (r *friend.MessageActionResp, err error) {
	var _args friend.FriendServiceMessageActionArgs
	_args.Req = req
	var _result friend.FriendServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
