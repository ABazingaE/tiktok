// Code generated by Kitex v0.4.4. DO NOT EDIT.

package followservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	follow "tiktok/kitex_gen/follow"
)

func serviceInfo() *kitex.ServiceInfo {
	return followServiceServiceInfo
}

var followServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FollowService"
	handlerType := (*follow.FollowService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FollowAction": kitex.NewMethodInfo(followActionHandler, newFollowServiceFollowActionArgs, newFollowServiceFollowActionResult, false),
		"FollowList":   kitex.NewMethodInfo(followListHandler, newFollowServiceFollowListArgs, newFollowServiceFollowListResult, false),
		"FollowerList": kitex.NewMethodInfo(followerListHandler, newFollowServiceFollowerListArgs, newFollowServiceFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "follow",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func followActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceFollowActionArgs)
	realResult := result.(*follow.FollowServiceFollowActionResult)
	success, err := handler.(follow.FollowService).FollowAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceFollowActionArgs() interface{} {
	return follow.NewFollowServiceFollowActionArgs()
}

func newFollowServiceFollowActionResult() interface{} {
	return follow.NewFollowServiceFollowActionResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceFollowListArgs)
	realResult := result.(*follow.FollowServiceFollowListResult)
	success, err := handler.(follow.FollowService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceFollowListArgs() interface{} {
	return follow.NewFollowServiceFollowListArgs()
}

func newFollowServiceFollowListResult() interface{} {
	return follow.NewFollowServiceFollowListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follow.FollowServiceFollowerListArgs)
	realResult := result.(*follow.FollowServiceFollowerListResult)
	success, err := handler.(follow.FollowService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceFollowerListArgs() interface{} {
	return follow.NewFollowServiceFollowerListArgs()
}

func newFollowServiceFollowerListResult() interface{} {
	return follow.NewFollowServiceFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowAction(ctx context.Context, req *follow.FollowActionReq) (r *follow.FollowActionResp, err error) {
	var _args follow.FollowServiceFollowActionArgs
	_args.Req = req
	var _result follow.FollowServiceFollowActionResult
	if err = p.c.Call(ctx, "FollowAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *follow.FollowListReq) (r *follow.FollowListResp, err error) {
	var _args follow.FollowServiceFollowListArgs
	_args.Req = req
	var _result follow.FollowServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *follow.FollowerListReq) (r *follow.FollowerListResp, err error) {
	var _args follow.FollowServiceFollowerListArgs
	_args.Req = req
	var _result follow.FollowServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
